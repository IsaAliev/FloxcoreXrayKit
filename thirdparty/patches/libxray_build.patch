diff --git a/thirdparty/Xray-core-1.8.8/MakefileFramework b/thirdparty/Xray-core-1.8.8/MakefileFramework
new file mode 100644
index 0000000..7c0e1a0
--- /dev/null
+++ b/thirdparty/Xray-core-1.8.8/MakefileFramework
@@ -0,0 +1,301 @@
+# go/Makefile
+
+ARCHS ?= arm64
+EFFECTIVE_PLATFORM_NAME ?=
+PLATFORM_NAME ?= macosx
+TARGET_DEVICE_PLATFORM_NAME ?=
+SDKROOT ?= $(shell xcrun --sdk $(PLATFORM_NAME) --show-sdk-path)
+CONFIGURATION_BUILD_DIR ?= $(CURDIR)/out
+CONFIGURATION_TEMP_DIR ?= $(CURDIR)/.tmp
+export PATH := $(PATH):/usr/local/bin:/opt/homebrew/bin
+export CC ?= clang
+LIPO ?= lipo
+DESTDIR ?= $(CONFIGURATION_BUILD_DIR)
+BUILDDIR ?= $(CONFIGURATION_TEMP_DIR)/libxray-go-bridge
+
+build: detect_platform
+
+export REAL_GOROOT ?= $(shell PATH=$(PATH) go env GOROOT 2>/dev/null)
+export GOROOT := $(BUILDDIR)/goroot
+$(GOROOT)/.prepared:
+	[ -n "$(REAL_GOROOT)" ]
+	rm -rf "$(GOROOT)"
+	mkdir -p "$(GOROOT)"
+	mkdir -p "$(DESTDIR)"
+	rsync -a --delete --exclude=pkg/obj/go-build "$(REAL_GOROOT)/" "$(GOROOT)/"
+	touch "$@"
+
+# MacCatalyst arm64
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: CFLAGS := -target arm64-apple-ios16.0-macabi -isysroot $(SDKROOT) -arch arm64
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: export GOARCH := arm64
+$(BUILDDIR)/libxray-go-maccatalyst-arm64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-arm64.a" -buildmode c-archive ./main
+	#go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-arm64.a" -tags=ios -buildmode c-archive ./main
+
+# MacCatalyst x86_64
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: CFLAGS := -target x86_64-apple-ios16.0-macabi -isysroot $(SDKROOT) -arch x86_64
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: export GOARCH := amd64
+$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a" -buildmode c-archive ./main
+	#go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a" -tags=ios -buildmode c-archive ./main
+
+# iPhoneOS arm64
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export SDKROOT := $(shell xcrun --sdk iphoneos --show-sdk-path)
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: CFLAGS := -miphoneos-version-min=16.0 -isysroot $(SDKROOT) -arch arm64
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: export GOARCH := arm64
+$(BUILDDIR)/libxray-go-iphoneos-arm64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-iphoneos-arm64.a" -buildmode c-archive ./main
+
+# AppleTVOS arm64
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: export SDKROOT := $(shell xcrun --sdk appletvos --show-sdk-path)
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: CFLAGS := -target arm64-apple-tvos17.0 -isysroot $(SDKROOT) -arch arm64
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: export GOARCH := arm64
+$(BUILDDIR)/libxray-go-appletvos-arm64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-appletvos-arm64.a" -buildmode c-archive ./main
+
+# AppleTV Simulator x86_64
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export SDKROOT := $(shell xcrun --sdk appletvsimulator --show-sdk-path)
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: CFLAGS := -target x86_64-apple-tvos17.0-simulator -isysroot $(SDKROOT) -arch x86_64
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: export GOARCH := amd64
+$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a" -buildmode c-archive ./main
+
+# AppleTV Simulator arm64
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export SDKROOT := $(shell xcrun --sdk appletvsimulator --show-sdk-path)
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: CFLAGS := -target arm64-apple-tvos17.0-simulator -isysroot $(SDKROOT) -arch arm64
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: export GOARCH := arm64
+$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a" -buildmode c-archive ./main
+
+# iPhone Simulator x86_64
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export SDKROOT := $(shell xcrun --sdk iphonesimulator --show-sdk-path)
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: CFLAGS := -target x86_64-apple-ios16.0-simulator -isysroot $(SDKROOT) -arch x86_64
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: export GOARCH := amd64
+$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a" -buildmode c-archive ./main
+
+# iPhone Simulator arm64
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export SDKROOT := $(shell xcrun --sdk iphonesimulator --show-sdk-path)
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: CFLAGS := -target arm64-apple-ios16.0-simulator -isysroot $(SDKROOT) -arch arm64
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export GOOS := ios
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: export GOARCH := arm64
+$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a" -buildmode c-archive ./main
+
+# MacOSX x86_64
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CFLAGS := -isysroot $(shell xcrun --sdk macosx --show-sdk-path) -arch x86_64
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CC := /usr/bin/clang $(CFLAGS)
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export GOOS := darwin
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: export GOARCH := amd64
+$(BUILDDIR)/libxray-go-macosx-x86_64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-macosx-x86_64.a" -buildmode c-archive ./main
+
+# MacOSX arm64
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export CGO_ENABLED := 1
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export SDKROOT := $(shell xcrun --sdk macosx --show-sdk-path)
+$(BUILDDIR)/libxray-go-macosx-arm64.a: CFLAGS := -isysroot $(shell xcrun --sdk macosx --show-sdk-path) -arch arm64
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export CC := clang $(CFLAGS)
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export CGO_CFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export CGO_LDFLAGS := $(CFLAGS)
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export GOOS := darwin
+$(BUILDDIR)/libxray-go-macosx-arm64.a: export GOARCH := arm64
+$(BUILDDIR)/libxray-go-macosx-arm64.a: $(GOROOT)/.prepared go.mod
+	go build -ldflags=-w -trimpath -v -o "$(BUILDDIR)/libxray-go-macosx-arm64.a" -buildmode c-archive ./main
+
+$(DESTDIR)/MacOSX/LibXray.framework: $(BUILDDIR)/libxray-go-macosx-x86_64.a $(BUILDDIR)/libxray-go-macosx-arm64.a
+	$(LIPO) -create -output "$(BUILDDIR)/libxray_mac_osx_fat.a" "$(BUILDDIR)/libxray-go-macosx-x86_64.a" "$(BUILDDIR)/libxray-go-macosx-arm64.a"
+	mkdir -p $(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Headers
+	mkdir -p $(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Modules
+	cp -v "$(BUILDDIR)/libxray-go-macosx-arm64.h" "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Headers/libxray-go.h"
+	cp -v "$(BUILDDIR)/libxray_mac_osx_fat.a" "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/LibXray"
+	cp -v "$(BUILDDIR)/libxray_mac_osx_fat.a" "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/"
+	echo "framework module LibXray {" > "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  umbrella header \"libxray-go.h\"" >> "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  export *" >> "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "}" >> "$(DESTDIR)/MacOSX/LibXray.framework/Versions/A/Modules/module.modulemap"
+	ln -s "A" "$(DESTDIR)/MacOSX/LibXray.framework/Versions/Current"
+	ln -s "Versions/Current/Headers" "$(DESTDIR)/MacOSX/LibXray.framework/Headers"
+	ln -s "Versions/Current/Modules" "$(DESTDIR)/MacOSX/LibXray.framework/Modules"
+	ln -s "Versions/Current/LibXray" "$(DESTDIR)/MacOSX/LibXray.framework/LibXray"
+
+$(DESTDIR)/MacCatalyst/LibXray.framework: $(BUILDDIR)/libxray-go-maccatalyst-x86_64.a $(BUILDDIR)/libxray-go-maccatalyst-arm64.a
+	$(LIPO) -create -output "$(BUILDDIR)/libxray_mac_catalyst_fat.a" "$(BUILDDIR)/libxray-go-maccatalyst-x86_64.a" "$(BUILDDIR)/libxray-go-maccatalyst-arm64.a"
+	mkdir -p $(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Headers
+	mkdir -p $(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Modules
+	cp -v "$(BUILDDIR)/libxray-go-maccatalyst-arm64.h" "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Headers/libxray-go.h"
+	cp -v "$(BUILDDIR)/libxray_mac_catalyst_fat.a" "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/LibXray"
+	cp -v "$(BUILDDIR)/libxray_mac_catalyst_fat.a" "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/"
+	echo "framework module LibXray {" > "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  umbrella header \"libxray-go.h\"" >> "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  export *" >> "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "}" >> "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/A/Modules/module.modulemap"
+	ln -s "A" "$(DESTDIR)/MacCatalyst/LibXray.framework/Versions/Current"
+	ln -s "Versions/Current/Headers" "$(DESTDIR)/MacCatalyst/LibXray.framework/Headers"
+	ln -s "Versions/Current/Modules" "$(DESTDIR)/MacCatalyst/LibXray.framework/Modules"
+	ln -s "Versions/Current/LibXray" "$(DESTDIR)/MacCatalyst/LibXray.framework/LibXray"
+
+$(DESTDIR)/iPhoneOS/LibXray.framework: $(BUILDDIR)/libxray-go-iphoneos-arm64.a
+	mkdir -p $(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Headers
+	mkdir -p $(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Modules
+	cp -v "$(BUILDDIR)/libxray-go-iphoneos-arm64.h" "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Headers/libxray-go.h"
+	cp -v "$(BUILDDIR)/libxray-go-iphoneos-arm64.a" "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/LibXray"
+	cp -v "$(BUILDDIR)/libxray-go-iphoneos-arm64.a" "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/"
+	echo "framework module LibXray {" > "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  umbrella header \"libxray-go.h\"" >> "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  export *" >> "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "}" >> "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	ln -s "A" "$(DESTDIR)/iPhoneOS/LibXray.framework/Versions/Current"
+	ln -s "Versions/Current/Headers" "$(DESTDIR)/iPhoneOS/LibXray.framework/Headers"
+	ln -s "Versions/Current/Modules" "$(DESTDIR)/iPhoneOS/LibXray.framework/Modules"
+	ln -s "Versions/Current/LibXray" "$(DESTDIR)/iPhoneOS/LibXray.framework/LibXray"
+
+$(DESTDIR)/AppleTVOS/LibXray.framework: $(BUILDDIR)/libxray-go-appletvos-arm64.a
+	mkdir -p $(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Headers
+	mkdir -p $(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Modules
+	cp -v "$(BUILDDIR)/libxray-go-appletvos-arm64.h" "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Headers/libxray-go.h"
+	cp -v "$(BUILDDIR)/libxray-go-appletvos-arm64.a" "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/LibXray"
+	cp -v "$(BUILDDIR)/libxray-go-appletvos-arm64.a" "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/"
+	echo "framework module LibXray {" > "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  umbrella header \"libxray-go.h\"" >> "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  export *" >> "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "}" >> "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/A/Modules/module.modulemap"
+	ln -s "A" "$(DESTDIR)/AppleTVOS/LibXray.framework/Versions/Current"
+	ln -s "Versions/Current/Headers" "$(DESTDIR)/AppleTVOS/LibXray.framework/Headers"
+	ln -s "Versions/Current/Modules" "$(DESTDIR)/AppleTVOS/LibXray.framework/Modules"
+	ln -s "Versions/Current/LibXray" "$(DESTDIR)/AppleTVOS/LibXray.framework/LibXray"
+
+$(DESTDIR)/AppleTVSimulator/LibXray.framework: $(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a $(BUILDDIR)/libxray-go-appletvsimulator-arm64.a
+	$(LIPO) -create -output "$(BUILDDIR)/libxray_appletvsimulator_fat.a" "$(BUILDDIR)/libxray-go-appletvsimulator-x86_64.a" "$(BUILDDIR)/libxray-go-appletvsimulator-arm64.a"
+	mkdir -p $(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Headers
+	mkdir -p $(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Modules
+	cp -v "$(BUILDDIR)/libxray-go-appletvsimulator-arm64.h" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Headers/libxray-go.h"
+	cp -v "$(BUILDDIR)/libxray_appletvsimulator_fat.a" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/LibXray"
+	cp -v "$(BUILDDIR)/libxray_appletvsimulator_fat.a" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/"
+	echo "framework module LibXray {" > "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  umbrella header \"libxray-go.h\"" >> "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  export *" >> "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "}" >> "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	ln -s "A" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Versions/Current"
+	ln -s "Versions/Current/Headers" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Headers"
+	ln -s "Versions/Current/Modules" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/Modules"
+	ln -s "Versions/Current/LibXray" "$(DESTDIR)/AppleTVSimulator/LibXray.framework/LibXray"
+
+$(DESTDIR)/iPhoneSimulator/LibXray.framework: $(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a $(BUILDDIR)/libxray-go-iphonesimulator-arm64.a
+	$(LIPO) -create -output "$(BUILDDIR)/libxray_iphonesimulator_fat.a" "$(BUILDDIR)/libxray-go-iphonesimulator-x86_64.a" "$(BUILDDIR)/libxray-go-iphonesimulator-arm64.a"
+	mkdir -p $(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Headers
+	mkdir -p $(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Modules
+	cp -v "$(BUILDDIR)/libxray-go-iphonesimulator-arm64.h" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Headers/libxray-go.h"
+	cp -v "$(BUILDDIR)/libxray_iphonesimulator_fat.a" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/LibXray"
+	cp -v "$(BUILDDIR)/libxray_iphonesimulator_fat.a" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/"
+	echo "framework module LibXray {" > "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  umbrella header \"libxray-go.h\"" >> "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "  export *" >> "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	echo "}" >> "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/A/Modules/module.modulemap"
+	ln -s "A" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Versions/Current"
+	ln -s "Versions/Current/Headers" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Headers"
+	ln -s "Versions/Current/Modules" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/Modules"
+	ln -s "Versions/Current/LibXray" "$(DESTDIR)/iPhoneSimulator/LibXray.framework/LibXray"
+
+all: $(DESTDIR)/LibXray.xcframework
+
+$(DESTDIR)/LibXray.xcframework: $(DESTDIR)/MacCatalyst/LibXray.framework $(DESTDIR)/iPhoneOS/LibXray.framework $(DESTDIR)/MacOSX/LibXray.framework $(DESTDIR)/iPhoneSimulator/LibXray.framework $(DESTDIR)/AppleTVSimulator/LibXray.framework $(DESTDIR)/AppleTVOS/LibXray.framework
+	xcodebuild -create-xcframework -output "$(DESTDIR)/LibXray.xcframework" -framework "$(DESTDIR)/MacCatalyst/LibXray.framework" -framework "$(DESTDIR)/iPhoneOS/LibXray.framework" -framework "$(DESTDIR)/MacOSX/LibXray.framework" -framework "$(DESTDIR)/iPhoneSimulator/LibXray.framework" -framework "$(DESTDIR)/AppleTVSimulator/LibXray.framework" -framework "$(DESTDIR)/AppleTVOS/LibXray.framework"
+
+ios: $(DESTDIR)/MacCatalyst/LibXray.framework $(DESTDIR)/iPhoneOS/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/MacCatalyst/LibXray.framework" -framework "$(DESTDIR)/iPhoneOS/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+
+appletvos: $(DESTDIR)/AppleTVOS/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/AppleTVOS/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+	@cp "$(DESTDIR)/LibXray.xcframework/tvos-arm64/LibXray.framework/Versions/A/LibXray" "$(DESTDIR)/libxray-go.a"
+	@cp "$(DESTDIR)/LibXray.xcframework/tvos-arm64/LibXray.framework/Versions/A/Headers/libxray-go.h" "$(DESTDIR)/libxray-go.h"
+
+iphoneos: $(DESTDIR)/iPhoneOS/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/iPhoneOS/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+	@cp "$(DESTDIR)/LibXray.xcframework/ios-arm64/LibXray.framework/Versions/A/LibXray" "$(DESTDIR)/libxray-go.a"
+	@cp "$(DESTDIR)/LibXray.xcframework/ios-arm64/LibXray.framework/Versions/A/Headers/libxray-go.h" "$(DESTDIR)/libxray-go.h"
+
+appletvsimulator: $(DESTDIR)/AppleTVSimulator/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/AppleTVSimulator/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+	@cp "$(DESTDIR)/LibXray.xcframework/tvos-arm64_x86_64-simulator/LibXray.framework/Versions/A/LibXray" "$(DESTDIR)/libxray-go.a"
+	@cp "$(DESTDIR)/LibXray.xcframework/tvos-arm64_x86_64-simulator/LibXray.framework/Versions/A/Headers/libxray-go.h" "$(DESTDIR)/libxray-go.h"
+
+iphonesimulator: $(DESTDIR)/iPhoneSimulator/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/iPhoneSimulator/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+	@cp "$(DESTDIR)/LibXray.xcframework/ios-arm64_x86_64-simulator/LibXray.framework/Versions/A/LibXray" "$(DESTDIR)/libxray-go.a"
+	@cp "$(DESTDIR)/LibXray.xcframework/ios-arm64_x86_64-simulator/LibXray.framework/Versions/A/Headers/libxray-go.h" "$(DESTDIR)/libxray-go.h"
+
+macosx: $(DESTDIR)/MacOSX/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/MacOSX/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+	@cp "$(DESTDIR)/LibXray.xcframework/macos-arm64_x86_64/LibXray.framework/Versions/A/LibXray" "$(DESTDIR)/libxray-go.a"
+	@cp "$(DESTDIR)/LibXray.xcframework/macos-arm64_x86_64/LibXray.framework/Versions/A/Headers/libxray-go.h" "$(DESTDIR)/libxray-go.h"
+
+maccatalyst: $(DESTDIR)/MacCatalyst/LibXray.framework
+	@rm -rf "$(DESTDIR)/LibXray.xcframework"
+	@xcodebuild -create-xcframework -framework "$(DESTDIR)/MacCatalyst/LibXray.framework" -output "$(DESTDIR)/LibXray.xcframework"
+	@cp "$(DESTDIR)/LibXray.xcframework/ios-arm64_x86_64-maccatalyst/LibXray.framework/Versions/A/LibXray" "$(DESTDIR)/libxray-go.a"
+	@cp "$(DESTDIR)/LibXray.xcframework/ios-arm64_x86_64-maccatalyst/LibXray.framework/Versions/A/Headers/libxray-go.h" "$(DESTDIR)/libxray-go.h"
+
+detect_platform:
+	@if [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "iphoneos" ]; then \
+		$(MAKE) iphoneos; \
+	elif [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "iphonesimulator" ]; then \
+		$(MAKE) iphonesimulator; \
+	elif [ "$(TARGET_DEVICE_PLATFORM_NAME)" = "appletvsimulator" ]; then \
+		$(MAKE) iphonesimulator; \
+	elif [ "$(PLATFORM_NAME)" = "macosx" ]; then \
+		if [ "$(EFFECTIVE_PLATFORM_NAME)" = "-maccatalyst" ]; then \
+			$(MAKE) maccatalyst; \
+		else \
+			$(MAKE) macosx; \
+		fi; \
+	fi
+
+clean:
+	rm -rf "$(BUILDDIR)" "$(DESTDIR)/libxray-go.[ah]" "$(DESTDIR)/LibXray.xcframework" "$(DESTDIR)/MacCatalyst/LibXray.framework" "$(DESTDIR)/MacOSX/LibXray.framework" "$(DESTDIR)/iPhoneSimulator/LibXray.framework" "$(DESTDIR)/iPhoneOS/LibXray.framework" "$(DESTDIR)/AppleTVSimulator/LibXray.framework"
+
+install: build
+
+.PHONY: clean build install all ios appletvsimulator iphoneos iphonesimulator maccatalyst macosx detect_platform
